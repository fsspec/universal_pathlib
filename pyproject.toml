[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "universal_pathlib"
license = {text = "MIT License"}
authors = [
    {name = "Andrew Fulton", email = "andrewfulton9@gmail.com"},
]
description = "pathlib api extended to use fsspec backends"
maintainers = [
    {name = "Andreas Poehlmann", email = "andreas@poehlmann.io"},
    {name = "Norman Rzepka"},
]
requires-python = ">=3.8"
dependencies = [
    "fsspec >=2022.1.0,!=2024.3.1",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Development Status :: 4 - Beta",
]
keywords = ["filesystem-spec", "pathlib"]
dynamic = ["version", "readme"]

[tool.setuptools.dynamic]
readme = {file = ["README.md"], content-type = "text/markdown"}

[project.optional-dependencies]
tests = [
    "pytest >=8",
    "pytest-sugar >=0.9.7",
    "pytest-cov >=4.1.0",
    "pytest-mock >=3.12.0",
    "pylint >=2.17.4",
    "mypy >=1.10.0",
    "pytest-mypy-plugins >=3.1.2",
    "packaging",
]
dev = [
    "adlfs; python_version<='3.12' or (python_version>'3.12' and os_name!='nt') ",
    "aiohttp",
    "requests",
    "gcsfs",
    "s3fs",
    # exclude moto installation on 3.13 windows until pywin32 wheels are available:
    "moto[s3,server]; python_version<='3.12' or (python_version>'3.12' and os_name!='nt') ",
    "webdav4[fsspec]",
    "paramiko",
    "wsgidav",
    "cheroot",
    # "hadoop-test-cluster",
    # "pyarrow",
    "pydantic",
    "pydantic-settings",
    "smbprotocol",
    "typing_extensions; python_version<'3.11'",
]

[project.urls]
Homepage = "https://github.com/fsspec/universal_pathlib"
Changelog = "https://github.com/fsspec/universal_pathlib/blob/main/CHANGELOG.md"

[tool.setuptools]
include-package-data = false

[tool.setuptools.package-data]
upath = ["py.typed"]

[tool.setuptools.packages.find]
exclude = [
    "upath.tests",
    "upath.tests.*",
]
namespaces = false

[tool.setuptools_scm]
write_to = "upath/_version.py"
version_scheme = "post-release"

[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
force-exclude = '''
(
  ^/upath/tests/pathlib/_test_support\.py
  |^/upath/tests/pathlib/test_pathlib_.*\.py
)
'''

[tool.isort]
profile = "black"
known_first_party = ["upath"]
force_single_line = true
line_length = 88

[tool.pytest.ini_options]
addopts = "-ra -m 'not hdfs' -p no:pytest-mypy-plugins"
markers = [
  "hdfs: mark test as hdfs",
  "pathlib: mark cpython pathlib tests",
]

[tool.coverage.run]
branch = true
source = ["upath"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "if typing.TYPE_CHECKING:",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
  "raise AssertionError",
  "@overload",
]

[tool.mypy]
# Error output
show_column_numbers = false
show_error_codes = true
show_error_context = true
show_traceback = true
pretty = true
check_untyped_defs = false
# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
files = ["upath"]
exclude = "^notebooks|^venv.*|tests.*|^noxfile.py"

[[tool.mypy.overrides]]
module = "fsspec.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "webdav4.*"
ignore_missing_imports = true

[tool.pylint.format]
max-line-length = 88

[tool.pylint.message_control]
enable = ["c-extension-no-member", "no-else-return"]

[tool.pylint.variables]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_|args|kwargs"

[tool.codespell]
ignore-words-list = " "

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]
